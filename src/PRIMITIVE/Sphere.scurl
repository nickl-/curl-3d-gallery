||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
|||
|||     http://www.apache.org/licenses/LICENSE-2.0
|||
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @author Hideki Omatsu
|||

{curl-file-attributes character-encoding = "shift-jis"}


|########################################################################################|
{doc-next
    {purpose  球形                                                                     }
    {details {itemize
                 {item {code 解説}  ： 
                     球形。
                 }
                 {item {code 備考}  ： 特になし。          }
                 {item {code 環境}  ： Surge6.0            }
                 {item {code 新規}  ： 2008/08/31 尾松秀紀 
                     新規作成                              }
                 {item {code 変更}  ：                     }
                 {item {code V/R }  ： 01/01               }
                 {item {code Copyright(c)} SCS 2008        }
                 {item {code Author}： 株式会社ベーシック  }}}
}
|########################################################################################|
{define-class public Sphere {inherits PolygonSet}
  
  |###|{doc-next {purpose 水平方向の分割数}}|###|
  field hres:int
  
  |###|{doc-next {purpose 垂直方向の分割数}}|###|
  field vres:int
  
  |###|{doc-next {purpose 半径}}|###|
  field size:Distance

  
  |######################################################################################|
  {doc-next 
    {purpose 球形のコンストラクタ                                        }
    {details {itemize
                 {item {code 解説}  ： 
                     初期処理を行う。                                    }
                 {item {code 新規}  :  2008/08/31 尾松秀紀               }}}
    {parameter hres, 水平方向の分割数                                    }
    {parameter vres, 垂直方向の分割数                                    }
    {parameter size, 半径                                                }
  }
  |######################################################################################|
  {constructor public {default
                          hres:int = 20,
                          vres:int = 10,
                          size:FloatDistance = 100f(mm),
                          ...}
    {construct-super {splice ...}}
    
    set self.hres = hres
    set self.vres = vres
    set self.size = size
    set (self.vertices, self.normals) = {self.sphere-vertices-normals hres, vres, size}
    set self.faces = {self.mesh-faces hres, vres}
    set self.lighting-enabled? = true
    set self.specular-color = {Color.from-rgb .7, .7, .7}
  }
  
  
  |######################################################################################|
  {doc-next 
    {purpose 球形の座標点算出                                            }
    {details {itemize
                 {item {code 解説}  ： 
                     球形の座標点、法線ベクトルを算出する。              }
                 {item {code 新規}  :  2008/08/31 尾松秀紀               }}}
    {parameter hres, 水平方向の分割数                                    }
    {parameter vres, 垂直方向の分割数                                    }
    {parameter size, 半径                                                }
    {return-vals
        座標点列,
        座標点の法線ベクトル
    }
  }
  |######################################################################################|
  {method private {sphere-vertices-normals
                      hres:int,
                      vres:int,
                      size:FloatDistance
                  }:(
                     {Array-of FloatDistance3d},
                     {Array-of FloatDirection3d}
                    )
    
    let vertices:{Array-of FloatDistance3d} = {{Array-of FloatDistance3d}.from-size
                                                  (hres + 1) * (vres + 1),
                                                  {FloatDistance3d 0f(m), 0f(m), 0f(m)}
                                              }
    let normals:{Array-of FloatDirection3d} = {{Array-of FloatDirection3d}.from-size
                                                  (hres + 1) * (vres + 1), 
                                                  {FloatDirection3d 0, 0, 0}
                                              }
    let nn:int = 0
    {for ii:int = 0 to hres do
        {for jj:int = 0 to vres do
            let az:FloatAngle = -180f(deg) + ii * 360f(deg)/hres
            let el:FloatAngle =  -90f(deg) + jj * 180f(deg)/vres
            set vertices[nn] = {FloatDistance3d 
                                   ({cos az} * {cos el}) * size,
                                   ({sin az} * {cos el}) * size,
                                   ({sin el}) * size
                               }
            set normals[nn] = vertices[nn] / size
            {inc nn}
        }
    }
    {return vertices, normals}
  }
  
  
  |######################################################################################|
  {doc-next 
    {purpose 球形の面構成情報算出                                        }
    {details {itemize
                 {item {code 解説}  ： 
                     球形の面構成情報を算出する。                        }
                 {item {code 新規}  :  2008/08/31 尾松秀紀               }}}
    {parameter hres, 水平方向の分割数                                    }
    {parameter vres, 垂直方向の分割数                                    }
    {return-vals
        面構成情報
    }
  }
  |######################################################################################|
  {method private {mesh-faces
                      hres:int,
                      vres:int
                  }:#{Array-of #{Array-of int}}
    
    let faces:#{Array-of #{Array-of int}} = {{Array-of #{Array-of int}}.from-size hres * vres, null}
    let nn:int = 0
    {for ii:int = 0 to hres - 1 do
        {for jj:int = 0 to vres - 1 do
            set faces[nn] = 
                {new {Array-of int},
                    ii       * (vres + 1) + jj,
                    (ii + 1) * (vres + 1) + jj,
                    (ii + 1) * (vres + 1) + jj + 1,
                    ii       * (vres + 1) + jj + 1
                }
            {inc nn}
        }
    }
    {return faces}
  }
  
  
}
